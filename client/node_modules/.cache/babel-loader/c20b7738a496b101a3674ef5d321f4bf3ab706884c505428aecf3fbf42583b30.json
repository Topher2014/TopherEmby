{"ast":null,"code":"var _jsxFileName = \"/home/topher/Desktop/Flatiron/Phase5/Project/TopherEmby/client/src/Components/EditGroups.js\",\n  _s = $RefreshSig$();\nimport { useHistory, Link } from 'react-router-dom';\nimport { useEffect, React } from 'react';\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\nimport { Button, ListItem, List, Container, Box, TextField, Typography, Chip } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EditGroups(_ref) {\n  _s();\n  let {\n    groups,\n    fetchGroups,\n    setGroups,\n    user\n  } = _ref;\n  useEffect(() => {\n    fetchGroups();\n  }, []);\n  const history = useHistory();\n  const formSchema = yup.object().shape({\n    name: yup.string().required('Enter group name, dummy!')\n  });\n  function handleDelete(id) {\n    const newGroups = groups.filter(group => {\n      return group.id !== id;\n    });\n    fetch(`/group/${id}`, {\n      method: 'DELETE'\n    }).then(() => setGroups(newGroups));\n  }\n  const formik = useFormik({\n    initialValues: {\n      name: ''\n    },\n    validationSchema: formSchema,\n    validateOnChange: false,\n    onSubmit: (values, _ref2) => {\n      let {\n        resetForm\n      } = _ref2;\n      fetch('/groups', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          ...values\n        })\n      }).then(response => {\n        if (response.ok) {\n          response.json().then(data => {\n            history.push('/editgroups');\n            fetchGroups();\n            resetForm({\n              values: ''\n            });\n            fetch('/groupusers', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                user_id: data.user_id,\n                group_id: data.id\n              })\n            });\n          });\n        }\n      });\n    }\n  });\n  const renderGroups = groups.map(mappedGroups => mappedGroups.groupuser).flat().filter(filteredGroups => filteredGroups.user_id === user.id).map(group => {\n    console.log(group);\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(List, {\n        className: \"groupcard\",\n        children: [/*#__PURE__*/_jsxDEV(ListItem, {\n          children: [\" \", group.groups.name, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Chip, {\n          className: \"button-30\",\n          onDelete: () => handleDelete(group.groups.id)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => history.push(`/addremoveusers/${group.groups.id}`),\n          children: \" Add/Remove Users  \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this)\n    }, group.groups.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      children: \" Edit Groups \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      style: {\n        color: 'red'\n      },\n      children: [\" \", formik.errors.name, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      className: \"groupform\",\n      component: \"form\",\n      onSubmit: formik.handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Name: \",\n        name: \"name\",\n        value: formik.values.name,\n        onChange: formik.handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        children: \" Add Group \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      className: \"groupscontainer\",\n      children: [\" \", renderGroups, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n}\n_s(EditGroups, \"PhbSoD0JALHP7PlB5X41o3iPV54=\", false, function () {\n  return [useHistory, useFormik];\n});\n_c = EditGroups;\nexport default EditGroups;\nvar _c;\n$RefreshReg$(_c, \"EditGroups\");","map":{"version":3,"names":["useHistory","Link","useEffect","React","useFormik","yup","Button","ListItem","List","Container","Box","TextField","Typography","Chip","jsxDEV","_jsxDEV","EditGroups","_ref","_s","groups","fetchGroups","setGroups","user","history","formSchema","object","shape","name","string","required","handleDelete","id","newGroups","filter","group","fetch","method","then","formik","initialValues","validationSchema","validateOnChange","onSubmit","values","_ref2","resetForm","headers","body","JSON","stringify","response","ok","json","data","push","user_id","group_id","renderGroups","map","mappedGroups","groupuser","flat","filteredGroups","console","log","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onDelete","onClick","style","color","errors","component","handleSubmit","label","value","onChange","handleChange","type","_c","$RefreshReg$"],"sources":["/home/topher/Desktop/Flatiron/Phase5/Project/TopherEmby/client/src/Components/EditGroups.js"],"sourcesContent":["import { useHistory, Link } from 'react-router-dom'\nimport { useEffect, React } from 'react'\nimport { useFormik } from 'formik'\nimport * as yup from 'yup'\nimport {Button, ListItem, List, Container, Box, TextField, Typography, Chip} from '@mui/material';\n\nfunction EditGroups({groups, fetchGroups, setGroups, user}) {\n    useEffect(() => {fetchGroups()}, [])\n    const history = useHistory()\n    const formSchema = yup.object().shape({\n            name: yup.string().required('Enter group name, dummy!')\n        })\n\n    function handleDelete(id) {\n        const newGroups = groups.filter(group => {\n            return group.id !== id\n        })\n        fetch(`/group/${id}`, {\n            method: 'DELETE'\n        }).then(() => setGroups(newGroups))\n    }\n\n    const formik = useFormik({\n        initialValues: {\n            name: '',\n        },\n        validationSchema: formSchema,\n        validateOnChange: false,\n        onSubmit: (values, {resetForm}) => {\n            fetch('/groups', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({...values}),\n            }).then((response) => {\n                if(response.ok) {\n                    response.json().then((data) => {\n                        history.push('/editgroups')\n                        fetchGroups()\n                        resetForm({ values: ''})\n                        fetch('/groupusers', {\n                            method: 'POST',\n                            headers: {\n                                'Content-Type': 'application/json',\n                            },\n                            body: JSON.stringify({user_id: data.user_id, group_id: data.id}),\n                        })\n                    })\n                }\n            })\n        }\n    })\n\n    const renderGroups = groups.map(mappedGroups => mappedGroups.groupuser).flat().filter(filteredGroups => filteredGroups.user_id === user.id).map(group => {\n        console.log(group)\n        return (\n            <Container key={group.groups.id} >\n            <List className='groupcard' >\n                <ListItem > {group.groups.name} </ListItem>\n                <Chip className='button-30' onDelete={() => handleDelete(group.groups.id)} />\n                <Button onClick={() => history.push(`/addremoveusers/${group.groups.id}`)} > Add/Remove Users  </Button>\n            </List>\n            </Container>\n            )\n    })\n    return (\n        <Container>\n            <Typography> Edit Groups </Typography>\n            <Typography style={{color:'red'}} > {formik.errors.name} </Typography>\n            <Box className='groupform' component='form' onSubmit={formik.handleSubmit}>\n                <TextField label='Name: ' name='name' value={formik.values.name} onChange={formik.handleChange} />\n                <Button type='submit' > Add Group </Button>\n            </Box>\n            <Box className='groupscontainer' > {renderGroups} </Box>\n        </Container>\n    )\n}\n\nexport default EditGroups"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}