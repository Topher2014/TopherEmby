{"ast":null,"code":"var _jsxFileName = \"/home/topher/Desktop/Flatiron/Phase5/Project/TopherEmby/client/src/Components/Groups.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport Requests from './Requests';\nimport GroupUsers from './GroupUsers';\nimport { Button } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Groups(_ref) {\n  _s();\n  let {\n    groups,\n    fetchGroups,\n    user\n  } = _ref;\n  useEffect(() => {\n    fetchGroups();\n  }, []);\n  const [groupID, setGroupID] = useState(null);\n  const [showUsers, setShowUsers] = useState(null);\n  const [initial, setInitial] = useState(true);\n  const history = useHistory();\n  // const [buttonState, setButtonState] = useState(initalState)\n  // const initialState = {group1: false}\n  // setButtonState\n  function handleClick() {\n    fetchGroups();\n    setShowUsers(toggle => !toggle);\n  }\n  const users = groups.map(mappedGroups => mappedGroups.groupuser).flat().filter(filteredGroups => filteredGroups.group_id === groupID).map(group => group.users);\n  // const buttonText = showUsers ? <button onClick={handleClick} > Show Requests </button> : <button onClick={handleClick} > Show Users </button>\n  const buttonText = showUsers ? /*#__PURE__*/_jsxDEV(Button, {\n    onClick: handleClick,\n    children: \" Show Requests \"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 36\n  }, this) : /*#__PURE__*/_jsxDEV(Button, {\n    onClick: handleClick,\n    children: \" Show Users \"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 94\n  }, this);\n  const initalButtonText = !initial ? buttonText : null;\n  const renderInfo = showUsers ? /*#__PURE__*/_jsxDEV(GroupUsers, {\n    users: users,\n    user: user\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 36\n  }, this) : /*#__PURE__*/_jsxDEV(Requests, {\n    groupID: groupID\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 79\n  }, this);\n  const initialRenderInfo = !initial ? renderInfo : null;\n  const renderGroups = groups.map(mappedGroups => mappedGroups.groupuser).flat().filter(filteredGroups => filteredGroups.user_id === user.id).map(group => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"groupcard\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            setGroupID(group.groups.id);\n            setInitial(false);\n          },\n          children: [\" \", group.groups.name, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, this)\n    }, group.groups.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Groups\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => history.push('/editgroups'),\n      children: \" Edit Groups \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), initalButtonText, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"groupscontainer\",\n      children: [\" \", renderGroups, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), initialRenderInfo]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n}\n_s(Groups, \"GiueiKaI+hhqUTeJ0K4DQZyp2EM=\", false, function () {\n  return [useHistory];\n});\n_c = Groups;\nexport default Groups;\nvar _c;\n$RefreshReg$(_c, \"Groups\");","map":{"version":3,"names":["useEffect","useState","Link","useHistory","Requests","GroupUsers","Button","jsxDEV","_jsxDEV","Groups","_ref","_s","groups","fetchGroups","user","groupID","setGroupID","showUsers","setShowUsers","initial","setInitial","history","handleClick","toggle","users","map","mappedGroups","groupuser","flat","filter","filteredGroups","group_id","group","buttonText","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","initalButtonText","renderInfo","initialRenderInfo","renderGroups","user_id","id","className","name","push","_c","$RefreshReg$"],"sources":["/home/topher/Desktop/Flatiron/Phase5/Project/TopherEmby/client/src/Components/Groups.js"],"sourcesContent":["import { useEffect, useState } from 'react'\nimport { Link, useHistory } from 'react-router-dom'\nimport Requests from './Requests'\nimport GroupUsers from './GroupUsers'\nimport {Button} from '@mui/material';\n\nfunction Groups({groups, fetchGroups, user}){\n    useEffect(() => {fetchGroups()}, [])\n    const [groupID, setGroupID] = useState(null)\n    const [showUsers, setShowUsers] = useState(null)\n    const [initial, setInitial] = useState(true)\n    const history = useHistory()\n    // const [buttonState, setButtonState] = useState(initalState)\n    // const initialState = {group1: false}\n    // setButtonState\n    function handleClick() {\n        fetchGroups()\n        setShowUsers((toggle) => !toggle)\n    }\n    const users = groups.map(mappedGroups => mappedGroups.groupuser).flat().filter(filteredGroups => filteredGroups.group_id === groupID).map(group => group.users)\n    // const buttonText = showUsers ? <button onClick={handleClick} > Show Requests </button> : <button onClick={handleClick} > Show Users </button>\n    const buttonText = showUsers ? <Button onClick={handleClick} > Show Requests </Button> : <Button onClick={handleClick} > Show Users </Button>\n    const initalButtonText = !initial ? buttonText : null\n    const renderInfo = showUsers ? <GroupUsers users={users} user={user} /> : <Requests groupID={groupID} /> \n    const initialRenderInfo = !initial ? renderInfo : null\n\n    const renderGroups = groups.map(mappedGroups => mappedGroups.groupuser).flat().filter(filteredGroups => filteredGroups.user_id === user.id).map(group => {\n\n        return (\n            <div key={group.groups.id} >\n            <ul className='groupcard' >\n                <button onClick={() => {setGroupID(group.groups.id); setInitial(false)}} > {group.groups.name} </button>\n                {/* <div>\n                {group.groups.name} \n                </div>\n                <button onClick={() => {setGroupID(group.groups.id); handleClick()}} > {buttonText} </button> */}\n            </ul>\n            </div>\n            )\n    })\n\n    return (\n        <div>\n            <h1>Groups</h1>\n            {/* <Link to={`/editgroups`}> Edit Groups </Link> */}\n            <Button onClick={() => history.push('/editgroups')} > Edit Groups </Button>\n            {initalButtonText}\n            <div className='groupscontainer'> {renderGroups} </div>\n            {initialRenderInfo}\n        </div>\n    )\n}\n\nexport default Groups"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,IAAI,EAAEC,UAAU,QAAQ,kBAAkB;AACnD,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,UAAU,MAAM,cAAc;AACrC,SAAQC,MAAM,QAAO,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,SAASC,MAAMA,CAAAC,IAAA,EAA6B;EAAAC,EAAA;EAAA,IAA5B;IAACC,MAAM;IAAEC,WAAW;IAAEC;EAAI,CAAC,GAAAJ,IAAA;EACvCV,SAAS,CAAC,MAAM;IAACa,WAAW,EAAE;EAAA,CAAC,EAAE,EAAE,CAAC;EACpC,MAAM,CAACE,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACgB,SAAS,EAAEC,YAAY,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACkB,OAAO,EAAEC,UAAU,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAMoB,OAAO,GAAGlB,UAAU,EAAE;EAC5B;EACA;EACA;EACA,SAASmB,WAAWA,CAAA,EAAG;IACnBT,WAAW,EAAE;IACbK,YAAY,CAAEK,MAAM,IAAK,CAACA,MAAM,CAAC;EACrC;EACA,MAAMC,KAAK,GAAGZ,MAAM,CAACa,GAAG,CAACC,YAAY,IAAIA,YAAY,CAACC,SAAS,CAAC,CAACC,IAAI,EAAE,CAACC,MAAM,CAACC,cAAc,IAAIA,cAAc,CAACC,QAAQ,KAAKhB,OAAO,CAAC,CAACU,GAAG,CAACO,KAAK,IAAIA,KAAK,CAACR,KAAK,CAAC;EAC/J;EACA,MAAMS,UAAU,GAAGhB,SAAS,gBAAGT,OAAA,CAACF,MAAM;IAAC4B,OAAO,EAAEZ,WAAY;IAAAa,QAAA,EAAE;EAAe;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAS,gBAAG/B,OAAA,CAACF,MAAM;IAAC4B,OAAO,EAAEZ,WAAY;IAAAa,QAAA,EAAE;EAAY;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAS;EAC7I,MAAMC,gBAAgB,GAAG,CAACrB,OAAO,GAAGc,UAAU,GAAG,IAAI;EACrD,MAAMQ,UAAU,GAAGxB,SAAS,gBAAGT,OAAA,CAACH,UAAU;IAACmB,KAAK,EAAEA,KAAM;IAACV,IAAI,EAAEA;EAAK;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAG,gBAAG/B,OAAA,CAACJ,QAAQ;IAACW,OAAO,EAAEA;EAAQ;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAG;EACxG,MAAMG,iBAAiB,GAAG,CAACvB,OAAO,GAAGsB,UAAU,GAAG,IAAI;EAEtD,MAAME,YAAY,GAAG/B,MAAM,CAACa,GAAG,CAACC,YAAY,IAAIA,YAAY,CAACC,SAAS,CAAC,CAACC,IAAI,EAAE,CAACC,MAAM,CAACC,cAAc,IAAIA,cAAc,CAACc,OAAO,KAAK9B,IAAI,CAAC+B,EAAE,CAAC,CAACpB,GAAG,CAACO,KAAK,IAAI;IAErJ,oBACIxB,OAAA;MAAA2B,QAAA,eACA3B,OAAA;QAAIsC,SAAS,EAAC,WAAW;QAAAX,QAAA,eACrB3B,OAAA;UAAQ0B,OAAO,EAAEA,CAAA,KAAM;YAAClB,UAAU,CAACgB,KAAK,CAACpB,MAAM,CAACiC,EAAE,CAAC;YAAEzB,UAAU,CAAC,KAAK,CAAC;UAAA,CAAE;UAAAe,QAAA,GAAE,GAAC,EAACH,KAAK,CAACpB,MAAM,CAACmC,IAAI,EAAC,GAAC;QAAA;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAS;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAKvG,GAPKP,KAAK,CAACpB,MAAM,CAACiC,EAAE;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAQnB;EAEd,CAAC,CAAC;EAEF,oBACI/B,OAAA;IAAA2B,QAAA,gBACI3B,OAAA;MAAA2B,QAAA,EAAI;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,eAEf/B,OAAA,CAACF,MAAM;MAAC4B,OAAO,EAAEA,CAAA,KAAMb,OAAO,CAAC2B,IAAI,CAAC,aAAa,CAAE;MAAAb,QAAA,EAAE;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS,EAC1EC,gBAAgB,eACjBhC,OAAA;MAAKsC,SAAS,EAAC,iBAAiB;MAAAX,QAAA,GAAC,GAAC,EAACQ,YAAY,EAAC,GAAC;IAAA;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAM,EACtDG,iBAAiB;EAAA;IAAAN,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAChB;AAEd;AAAC5B,EAAA,CA7CQF,MAAM;EAAA,QAKKN,UAAU;AAAA;AAAA8C,EAAA,GALrBxC,MAAM;AA+Cf,eAAeA,MAAM;AAAA,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}