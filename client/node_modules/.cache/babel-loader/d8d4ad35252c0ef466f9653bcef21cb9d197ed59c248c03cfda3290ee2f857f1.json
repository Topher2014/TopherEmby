{"ast":null,"code":"var _jsxFileName = \"/home/topher/Desktop/Flatiron/Phase5/Project/TopherEmby/client/src/Components/Requests.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\n// import {ListItem, List, Container, Typography} from '@mui/material';\nimport { Container, Typography, List, ListItem, Box, Chip } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Requests(_ref) {\n  _s();\n  let {\n    groupID\n  } = _ref;\n  const [requests, setRequests] = useState([]);\n  useEffect(() => {\n    if (groupID) fetch(`/groups/${groupID}/requests`).then(res => res.json()).then(data => setRequests(data));\n  }, [groupID]);\n  function handleDeleteClick(user_id, group_id) {\n    fetch(`/groupusers`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user_id: user_id,\n        group_id: group_id\n      })\n    });\n    window.location.reload(true);\n  }\n  const renderRequests = requests.map(request => {\n    let type = '';\n    if (request.type === 'movie') {\n      type = request.type.charAt(0).toUpperCase() + request.type.slice(1);\n    } else if (request.type === 'tv') {\n      type = 'Show';\n    }\n    return /*#__PURE__*/_jsxDEV(ListItem, {\n      children: /*#__PURE__*/_jsxDEV(ListItem, {\n        children: /*#__PURE__*/_jsxDEV(Chip, {\n          label: `${type} ${request.name} ${request.quality} ${request.imdb_id}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 10\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)\n    }, request.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      fontSize: 24,\n      children: \"Requests\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), requests.length > 0 ? /*#__PURE__*/_jsxDEV(List, {\n      sx: {\n        width: '100%',\n        bgcolor: 'background.paper'\n      },\n      children: renderRequests\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 2\n      },\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        children: \"No requests found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_s(Requests, \"MIcAFnHRaJFubpcUtYXSDqOxSqY=\");\n_c = Requests;\nexport default Requests;\nvar _c;\n$RefreshReg$(_c, \"Requests\");","map":{"version":3,"names":["useState","useEffect","Container","Typography","List","ListItem","Box","Chip","jsxDEV","_jsxDEV","Requests","_ref","_s","groupID","requests","setRequests","fetch","then","res","json","data","handleDeleteClick","user_id","group_id","method","headers","body","JSON","stringify","window","location","reload","renderRequests","map","request","type","charAt","toUpperCase","slice","children","label","name","quality","imdb_id","fileName","_jsxFileName","lineNumber","columnNumber","id","fontSize","length","sx","width","bgcolor","mt","_c","$RefreshReg$"],"sources":["/home/topher/Desktop/Flatiron/Phase5/Project/TopherEmby/client/src/Components/Requests.js"],"sourcesContent":["import {useState, useEffect} from 'react'\n// import {ListItem, List, Container, Typography} from '@mui/material';\nimport { Container, Typography, List, ListItem, Box, Chip } from '@mui/material';\n\nfunction Requests({ groupID }) {\n  const [requests, setRequests] = useState([]);\n\n  useEffect(() => {\n    if (groupID)\n      fetch(`/groups/${groupID}/requests`)\n        .then((res) => res.json())\n        .then((data) => setRequests(data));\n  }, [groupID]);\n\n  function handleDeleteClick(user_id, group_id){\n      fetch(`/groupusers`, {\n          method: 'DELETE',\n          headers: {\n              'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({user_id: user_id, group_id: group_id}),\n      })\n          window.location.reload(true)\n  }\n\n  const renderRequests = requests.map((request) => {\n    let type = '';\n    if (request.type === 'movie') {\n      type = request.type.charAt(0).toUpperCase() + request.type.slice(1);\n    } else if (request.type === 'tv') {\n      type = 'Show';\n    }\n    return (\n      <ListItem key={request.id}>\n        <ListItem>\n          {/* <Typography fontSize={14}> {type} {request.name} {request.quality} {request.imdb_id} <Chip label='Remove'  onDelete={handleDeleteClick} ></Chip></Typography> */}\n         {/* <Chip >  {type} {request.name} {request.quality} {request.imdb_id} </Chip>  */}\n         <Chip label={`${type} ${request.name} ${request.quality} ${request.imdb_id}`} />\n\n        </ListItem>\n      </ListItem>\n    );\n  });\n\n  return (\n    <Container>\n      <Typography fontSize={24}>\n        Requests\n      </Typography>\n      {requests.length > 0 ? (\n        <List sx={{ width: '100%', bgcolor: 'background.paper' }}>\n          {renderRequests}\n        </List>\n      ) : (\n        <Box sx={{ mt: 2 }}>\n          <Typography>No requests found.</Typography>\n        </Box>\n      )}\n    </Container>\n  );\n}\n\nexport default Requests;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}