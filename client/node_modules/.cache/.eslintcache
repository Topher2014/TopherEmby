[{"/home/topher/Desktop/Flatiron/Phase5/Project/TopherEmby/client/src/index.js":"1","/home/topher/Desktop/Flatiron/Phase5/Project/TopherEmby/client/src/App.js":"2","/home/topher/Desktop/Flatiron/Phase5/Project/TopherEmby/client/src/Components/Home.js":"3","/home/topher/Desktop/Flatiron/Phase5/Project/TopherEmby/client/src/Components/Authentication.js":"4","/home/topher/Desktop/Flatiron/Phase5/Project/TopherEmby/client/src/Components/Nav.js":"5","/home/topher/Desktop/Flatiron/Phase5/Project/TopherEmby/client/src/Components/Groups.js":"6","/home/topher/Desktop/Flatiron/Phase5/Project/TopherEmby/client/src/Components/Requests.js":"7","/home/topher/Desktop/Flatiron/Phase5/Project/TopherEmby/client/src/Components/EditGroups.js":"8","/home/topher/Desktop/Flatiron/Phase5/Project/TopherEmby/client/src/Components/AddRequest.js":"9","/home/topher/Desktop/Flatiron/Phase5/Project/TopherEmby/client/src/Components/AddUsers.js":"10","/home/topher/Desktop/Flatiron/Phase5/Project/TopherEmby/client/src/Components/GroupUsers.js":"11","/home/topher/Desktop/Flatiron/Phase5/Project/TopherEmby/client/src/Components/Search.js":"12","/home/topher/Desktop/Flatiron/Phase5/Project/TopherEmby/client/src/Components/EnterManually.js":"13","/home/topher/Desktop/Flatiron/Phase5/Project/TopherEmby/client/src/Components/FriendsUsers.js":"14"},{"size":1605,"mtime":1681884417918,"results":"15","hashOfConfig":"16"},{"size":2466,"mtime":1681871074535,"results":"17","hashOfConfig":"16"},{"size":95,"mtime":1681612620171,"results":"18","hashOfConfig":"16"},{"size":3699,"mtime":1681885342916,"results":"19","hashOfConfig":"16"},{"size":1712,"mtime":1681883683932,"results":"20","hashOfConfig":"16"},{"size":2092,"mtime":1681874274498,"results":"21","hashOfConfig":"16"},{"size":1008,"mtime":1681861827705,"results":"22","hashOfConfig":"16"},{"size":2980,"mtime":1681871074535,"results":"23","hashOfConfig":"16"},{"size":1154,"mtime":1681716235944,"results":"24","hashOfConfig":"16"},{"size":2677,"mtime":1681874206959,"results":"25","hashOfConfig":"16"},{"size":573,"mtime":1681874317557,"results":"26","hashOfConfig":"16"},{"size":4776,"mtime":1681796390149,"results":"27","hashOfConfig":"16"},{"size":2833,"mtime":1681715636083,"results":"28","hashOfConfig":"16"},{"size":3288,"mtime":1681874534028,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"q1icht",{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"36"},"/home/topher/Desktop/Flatiron/Phase5/Project/TopherEmby/client/src/index.js",[],[],"/home/topher/Desktop/Flatiron/Phase5/Project/TopherEmby/client/src/App.js",[],[],[],"/home/topher/Desktop/Flatiron/Phase5/Project/TopherEmby/client/src/Components/Home.js",[],[],"/home/topher/Desktop/Flatiron/Phase5/Project/TopherEmby/client/src/Components/Authentication.js",["78","79"],[],"/home/topher/Desktop/Flatiron/Phase5/Project/TopherEmby/client/src/Components/Nav.js",[],[],"/home/topher/Desktop/Flatiron/Phase5/Project/TopherEmby/client/src/Components/Groups.js",["80"],[],"import { useEffect, useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport Requests from './Requests'\nimport GroupUsers from './GroupUsers'\n\nfunction Groups({groups, fetchGroups, user}){\n    useEffect(() => {fetchGroups()}, [])\n    const [groupID, setGroupID] = useState(null)\n    const [showUsers, setShowUsers] = useState(null)\n    const [initial, setInitial] = useState(true)\n    // const [buttonState, setButtonState] = useState(initalState)\n    // const initialState = {group1: false}\n    // setButtonState\n    function handleClick() {\n        fetchGroups()\n        setShowUsers((toggle) => !toggle)\n    }\n    const users = groups.map(mappedGroups => mappedGroups.groupuser).flat().filter(filteredGroups => filteredGroups.group_id === groupID).map(group => group.users)\n    const buttonText = showUsers ? <button onClick={handleClick} > Show Requests </button> : <button onClick={handleClick} > Show Users </button>\n    const initalButtonText = !initial ? buttonText : null\n    const renderInfo = showUsers ? <GroupUsers users={users} user={user} /> : <Requests groupID={groupID} /> \n    const initialRenderInfo = !initial ? renderInfo : null\n\n    const renderGroups = groups.map(mappedGroups => mappedGroups.groupuser).flat().filter(filteredGroups => filteredGroups.user_id === user.id).map(group => {\n\n        return (\n            <div key={group.groups.id} >\n            <ul className='groupcard' >\n                <button onClick={() => {setGroupID(group.groups.id); setInitial(false)}} > {group.groups.name} </button>\n                {/* <div>\n                {group.groups.name} \n                </div>\n                <button onClick={() => {setGroupID(group.groups.id); handleClick()}} > {buttonText} </button> */}\n            </ul>\n            </div>\n            )\n    })\n\n    return (\n        <div>\n            <h1>Groups</h1>\n            <Link to={`/editgroups`}> Edit Groups </Link>\n            {initalButtonText}\n            <div className='groupscontainer'> {renderGroups} </div>\n            {initialRenderInfo}\n        </div>\n    )\n}\n\nexport default Groups","/home/topher/Desktop/Flatiron/Phase5/Project/TopherEmby/client/src/Components/Requests.js",[],[],"/home/topher/Desktop/Flatiron/Phase5/Project/TopherEmby/client/src/Components/EditGroups.js",["81"],[],"import { useHistory, Link } from 'react-router-dom'\nimport { useEffect, React } from 'react'\nimport { useFormik } from 'formik'\nimport * as yup from 'yup'\n\nfunction EditGroups({groups, fetchGroups, setGroups, user}) {\n    useEffect(() => {fetchGroups()}, [])\n    const history = useHistory()\n    const formSchema = yup.object().shape({\n            name: yup.string().required('Enter group name, dummy!')\n        })\n\n    function handleDelete(id) {\n        const newGroups = groups.filter(group => {\n            return group.id !== id\n        })\n        fetch(`/group/${id}`, {\n            method: 'DELETE'\n        }).then(() => setGroups(newGroups))\n    }\n\n    const formik = useFormik({\n        initialValues: {\n            name: '',\n        },\n        validationSchema: formSchema,\n        validateOnChange: false,\n        onSubmit: (values, {resetForm}) => {\n            fetch('/groups', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({...values}),\n            }).then((response) => {\n                if(response.ok) {\n                    response.json().then((data) => {\n                        history.push('/editgroups')\n                        fetchGroups()\n                        resetForm({ values: ''})\n                        fetch('/groupusers', {\n                            method: 'POST',\n                            headers: {\n                                'Content-Type': 'application/json',\n                            },\n                            body: JSON.stringify({user_id: data.user_id, group_id: data.id}),\n                        })\n                    })\n                }\n            })\n        }\n    })\n\n    const renderGroups = groups.map(mappedGroups => mappedGroups.groupuser).flat().filter(filteredGroups => filteredGroups.user_id === user.id).map(group => {\n        console.log(group)\n        return (\n            <div key={group.groups.id} >\n            <ul className='groupcard' >\n                <li > {group.groups.name} </li>\n                <button className='button-30' onClick={() => handleDelete(group.groups.id)} > Delete </button>\n                <Link to={`/addremoveusers/${group.groups.id}`} > Add Users </Link>\n            </ul>\n            </div>\n            )\n    })\n    return (\n        <div>\n            <h1> Edit Groups </h1>\n            <h2 style={{color:'red'}} > {formik.errors.name} </h2>\n            <form className='groupform' onSubmit={formik.handleSubmit}>\n                <label> Name: </label>\n                <textarea\n                type='text'\n                name='name'\n                value={formik.values.name}\n                onChange={formik.handleChange}\n                />\n                <input className='button-30' type='submit' />\n            </form>\n            <div className='groupscontainer' > {renderGroups} </div>\n        </div>\n    )\n}\n\nexport default EditGroups","/home/topher/Desktop/Flatiron/Phase5/Project/TopherEmby/client/src/Components/AddRequest.js",["82"],[],"import { useState, useEffect } from 'react'\nimport EnterManually from \"./EnterManually\"\nimport Search from \"./Search\"\n\nfunction AddRequest({groups, fetchGroups, user}) {\n    const [showManual, setShowManual] = useState(false)\n    useEffect(() => {fetchGroups()}, [])\n    const groupOptions = groups.map(mappedGroups => mappedGroups.groupuser).flat().filter(filteredGroups => filteredGroups.user_id === user.id).map(group => {\n        return (\n            <option value={group.groups.id} key={group.groups.id} > {group.groups.name} </option>\n        )\n    })\n    function handleClick() {\n        setShowManual(toggle => !toggle)\n    }\n    const buttonText = showManual ? <button onClick={handleClick} > Search </button> : <button onClick={handleClick} > Don't see what you're looking for? Enter it manually! </button> \n    const requestMethod = showManual ? <EnterManually buttonText={buttonText} groupOptions={groupOptions} /> : <Search buttonText={buttonText} groupOptions={groupOptions} /> \n    return (\n        <div>\n            <h1> Add Request </h1>\n            {requestMethod}\n            <br></br>\n        </div>\n    )\n}\n\nexport default AddRequest","/home/topher/Desktop/Flatiron/Phase5/Project/TopherEmby/client/src/Components/AddUsers.js",["83"],[],"import { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom'\n\nfunction AddUsers({users, fetchUsers, user, groups, fetchGroups}) {\n    const {groupId} = useParams()\n    useEffect(() => {fetchUsers(); fetchGroups()}, [])\n\n    function handleAddClick(user_id, group_id){\n        fetch(`/groupusers`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({user_id: user_id, group_id: group_id}),\n        })\n            window.location.reload(true)\n    }\n\n    function handleDeleteClick(user_id, group_id){\n        fetch(`/groupusers`, {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({user_id: user_id, group_id: group_id}),\n        })\n            window.location.reload(true)\n    }\n    console.log(users)\n\n    const groupIDs = groups.map(mappedGroups => mappedGroups.groupuser).flat().filter(filteredGroup => filteredGroup.group_id === parseInt(groupId)).map(group => group.user_id)\n    const addUsers = user.friends.map((user) => {\n        if (groupIDs.includes(user.id)){\n            return null\n            }\n        return (\n            <div key={user.id} >\n            <ul className='usercard' >\n                <li > {user.name} </li>\n                <button className='button-30' onClick={() => handleAddClick(user.id, groupId)} > Add </button>\n            </ul>\n            </div>\n        )\n    })\n    const removeUsers = users.map((thisUser) => {\n        if(user.id === thisUser.id){\n            return null\n        }\n        if (!groupIDs.includes(thisUser.id)){\n            return null\n            }\n        return (\n            <div key={thisUser.id} >\n                <ul className='usercard' >\n                    <li>\n                        <h4> {thisUser.name} </h4>\n                        <button className='button-30' onClick={() => handleDeleteClick(thisUser.id, groupId)} > Remove </button>\n                    </li>\n                </ul>\n            </div>\n        )\n    })\n    const [showFriends, setShowFriends] = useState(false)\n    function handleClick() {\n        setShowFriends((toggle) => !toggle)\n    }\n    const buttonText = showFriends ? <button onClick={handleClick} > Add Friends to Group </button> : <button onClick={handleClick} > Remove Users from Group </button>\n    const renderUsers = showFriends ? removeUsers : addUsers\n    return (\n        <div>\n            <h1> Add/Remove Users to Group</h1>\n            {buttonText}\n            <h4> {renderUsers} </h4>\n        </div>\n    )\n}\n\nexport default AddUsers","/home/topher/Desktop/Flatiron/Phase5/Project/TopherEmby/client/src/Components/GroupUsers.js",[],[],"/home/topher/Desktop/Flatiron/Phase5/Project/TopherEmby/client/src/Components/Search.js",[],[],"/home/topher/Desktop/Flatiron/Phase5/Project/TopherEmby/client/src/Components/EnterManually.js",[],[],"/home/topher/Desktop/Flatiron/Phase5/Project/TopherEmby/client/src/Components/FriendsUsers.js",["84"],[],"import { useEffect, useState } from 'react'\n\nfunction FriendsUsers({user, users, fetchUsers}) {\n    useEffect(() => {fetchUsers()}, [])\n    const [filteredUsers, setFilteredUsers] = useState([])\n    useEffect(() => {setFilteredUsers(users)}, [users])\n\n    function handleAddFriendClick(friend_id) {\n        fetch('/friendships', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                user_id: parseInt(user.id),\n                friend_id: parseInt(friend_id)\n            })\n        })\n        .then(res => {\n            if(res.ok) {\n                window.location.reload(true)\n            } else console.log('error adding friend')\n        })\n    }\n\n    function handleDeleteFriendClick(friend_id) {\n        fetch('/friendships', {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                user_id: parseInt(user.id),\n                friend_id: parseInt(friend_id)\n            })\n        })\n        .catch(err => console.log(err))\n        window.location.reload(true)\n    }\n    const [showFriends, setShowFriends] = useState(false)\n    function handleClick() {\n        setShowFriends((toggle) => !toggle)\n    }\n    const buttonText = showFriends ? <button onClick={handleClick} > Show Friends </button> : <button onClick={handleClick} > Show All Users </button>\n    \n    const friendIDs = user.friends.map(friend => friend.id)\n    const handleChange = (event) => {\n        const search = event.target.value.toLowerCase()\n        setFilteredUsers(users.filter(user => {\n            const usernameBool = user.name.toLowerCase().includes(search)\n            const emailBool = user.email.toLowerCase().includes(search)\n            return usernameBool || emailBool\n        }))\n    }\n    const renderUsers = filteredUsers.map(filteredUser => {\n        const isFriend = friendIDs.includes(filteredUser.id)\n        if (filteredUser.id === user.id){\n            return ''\n        }\n        if (!showFriends){\n            if (friendIDs.includes(filteredUser.id)){\n            return (\n            <div key={filteredUser.id}>\n                {filteredUser.name}\n                {isFriend ? <button onClick={() => handleDeleteFriendClick(filteredUser.id)}> Delete Friend </button> : <button onClick={() => handleAddFriendClick(filteredUser.id)}> Add Friend </button>}\n            </div>\n            )\n            }\n            else return null\n            }\n        else if (showFriends){\n            return (\n            <div key={filteredUser.id}>\n                {filteredUser.name}\n                {isFriend ? <button onClick={() => handleDeleteFriendClick(filteredUser.id)}> Delete Friend </button> : <button onClick={() => handleAddFriendClick(filteredUser.id)}> Add Friend </button>}\n            </div>\n            )\n            }\n    return null\n    })\n\n    return (\n        <div>\n            <h1> Users </h1>\n            {buttonText}\n            <br></br>\n            <br></br>\n            <input onChange={(event) => handleChange(event)}/>  \n            <br></br>\n            <br></br>\n            {renderUsers}\n        </div>\n    )\n}\n\nexport default FriendsUsers",{"ruleId":"85","severity":1,"message":"86","line":18,"column":10,"nodeType":"87","messageId":"88","endLine":18,"endColumn":21},{"ruleId":"85","severity":1,"message":"89","line":18,"column":23,"nodeType":"87","messageId":"88","endLine":18,"endColumn":36},{"ruleId":"90","severity":1,"message":"91","line":7,"column":38,"nodeType":"92","endLine":7,"endColumn":40,"suggestions":"93"},{"ruleId":"90","severity":1,"message":"91","line":7,"column":38,"nodeType":"92","endLine":7,"endColumn":40,"suggestions":"94"},{"ruleId":"90","severity":1,"message":"91","line":7,"column":38,"nodeType":"92","endLine":7,"endColumn":40,"suggestions":"95"},{"ruleId":"90","severity":1,"message":"96","line":6,"column":52,"nodeType":"92","endLine":6,"endColumn":54,"suggestions":"97"},{"ruleId":"90","severity":1,"message":"98","line":4,"column":37,"nodeType":"92","endLine":4,"endColumn":39,"suggestions":"99"},"no-unused-vars","'createTheme' is defined but never used.","Identifier","unusedVar","'ThemeProvider' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchGroups'. Either include it or remove the dependency array. If 'fetchGroups' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["100"],["101"],["102"],"React Hook useEffect has missing dependencies: 'fetchGroups' and 'fetchUsers'. Either include them or remove the dependency array. If 'fetchUsers' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["103"],"React Hook useEffect has a missing dependency: 'fetchUsers'. Either include it or remove the dependency array. If 'fetchUsers' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["104"],{"desc":"105","fix":"106"},{"desc":"105","fix":"107"},{"desc":"105","fix":"108"},{"desc":"109","fix":"110"},{"desc":"111","fix":"112"},"Update the dependencies array to be: [fetchGroups]",{"range":"113","text":"114"},{"range":"115","text":"114"},{"range":"116","text":"114"},"Update the dependencies array to be: [fetchGroups, fetchUsers]",{"range":"117","text":"118"},"Update the dependencies array to be: [fetchUsers]",{"range":"119","text":"120"},[240,242],"[fetchGroups]",[255,257],[263,265],[243,245],"[fetchGroups, fetchUsers]",[132,134],"[fetchUsers]"]